priority 50

snippet import "import"
import {${2:module}} from '${1:path}';
endsnippet

snippet af "arrow function"
const ${1:name} = (${2:argument}): ${3:returnType} => {
	${VISUAL}$0
}
endsnippet

snippet afa "arrow function async"
const ${1:name} = async (${2:argument}): ${3:returnType} => {
	${VISUAL}$0
}
endsnippet

snippet afap "arrow function async Promise"
const ${1:name} = async (${2:argument}): Promise<${3:returnType}> => {
	${VISUAL}$0
}
endsnippet

snippet metha "class/object method async" 
async ${2:methodName}(${3:args}): ${4:void} {
		${0://code}
}
endsnippet

snippet methap "class/object method async promise" b
async ${2:methodName}(${3:args}): Promise<${4:void}> {
		${0://code}
}
endsnippet

snippet sleep "sleep function"
const sleep = (ms: number) => {
		return new Promise(resolve => setTimeout(resolve, ms));
}
endsnippet

snippet it "it function"
it('then: ${1:then}', () => {
	${VISUAL}$0
});
endsnippet

snippet ita "it async function"
it('then: ${1:then}', async () => {
	${VISUAL}$0
});
endsnippet

snippet bdd "BDD block"
describe('given: ${1:given}', () => {
	describe('when: ${2:when}', () => {
		it('then: ${3:then}', () => {
			${VISUAL}$0
		});
	});
});
endsnippet

snippet bdda "BDD block async"
describe('given: ${1:given}', () => {
	describe('when: ${2:when}', () => {
		it('then: ${3:then}', async () => {
			${VISUAL}$0
		});
	});
});
endsnippet
